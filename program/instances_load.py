"""
    Example python script used to upload rows to a Kusto database. In this example we are using 3 
    tables (all defined in the input settings file)

    InstanceView    : Product Instances
    ClusterView     : Instance AKS clusters
    PartitionView   : Instance data partitions

    The input to this script is the output of the instances_get.ps1. 
"""
import argparse
import sys
import os
import json
import pandas
import datetime
from azure.kusto.data import KustoConnectionStringBuilder
from azure.kusto.ingest import IngestionProperties, QueuedIngestClient
from azure.kusto.data.data_format import DataFormat

####################################################################
# Script has one required input which is the configuration file. 
parser = argparse.ArgumentParser(description='KUSTO Ingestion Tool')
parser.add_argument("-Configuration", required=True, type=str, help="Required JSON configuration")
programargs = parser.parse_args(sys.argv[1:])

####################################################################
# Prepare the configuration object from the input JSON, then load
# the expected input generated from the PS script.
configObject = None
productInstanceList = None

if os.path.exists(programargs.Configuration) == False:
    raise Exception("Must provide valid configuration file")

with open(programargs.Configuration, "r") as input_config:
    configObject = json.loads("\n".join(input_config.readlines()))

if os.path.exists(configObject["InstanceFile"]) == False:
    raise Exception("Must provide valid instance file")
    
with open(configObject["InstanceFile"], "r") as input_config:
    productInstanceList = json.loads("\n".join(input_config.readlines()))

####################################################################
# Prepare the rows to be inserted into the Kusto tables so that a 
# batched queue call to Kusto can be made.
currentStamp = datetime.datetime.now(datetime.UTC)
instanceTableRows = []
clusterTableRows = []
partitionTableRows = []
for instance in productInstanceList:
    instanceTableRows.append(
        [currentStamp, instance["Subscription"], instance["Name"], instance["ResourceGroups"]]
    )

    for cluster in instance["Clusters"]:
        clusterTableRows.append([currentStamp, instance["Subscription"], instance["Name"], cluster ])

    for partition in instance["Partitions"]:
        partitionTableRows.append([currentStamp, instance["Subscription"], instance["Name"], partition])

####################################################################
# For each table that has new input, ingest it to the appropriate table
kustoConnection = KustoConnectionStringBuilder.with_az_cli_authentication(configObject["IngestCluster"])
kustoClient = QueuedIngestClient(kustoConnection)

def IngestRows(kustoClient, kustoDatabase, kustoTable, dataRows, dataColumns):
    ingestion_props = IngestionProperties(
        database=kustoDatabase,
        table=kustoTable,
        data_format=DataFormat.CSV,
    )
    if(len(dataRows) > 0):
        print("Uploading {} rows to table {}".format(len(dataRows), kustoTable))
        df = pandas.DataFrame(data=dataRows, columns=dataColumns)
        res = kustoClient.ingest_from_dataframe(df, ingestion_properties=ingestion_props)
        print(res)

IngestRows(kustoClient, 
           configObject["IngestDb"],
           configObject["Tables"]["Instance"]["Table"],
           instanceTableRows, 
           configObject["Tables"]["Instance"]["Columns"]
          )
IngestRows(kustoClient, 
           configObject["IngestDb"],
           configObject["Tables"]["Cluster"]["Table"],
           clusterTableRows, 
           configObject["Tables"]["Cluster"]["Columns"]
          )
IngestRows(kustoClient, 
           configObject["IngestDb"],
           configObject["Tables"]["Partition"]["Table"],
           partitionTableRows, 
           configObject["Tables"]["Partition"]["Columns"]
          )

####################################################################
# Clean up the input file generated by the powershell script.
os.remove(configObject["InstanceFile"])        

